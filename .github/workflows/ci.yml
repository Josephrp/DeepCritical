name: CI
permissions:
  contents: read

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pydantic omegaconf hydra-core
        pip install -e .
        pip install -e ".[dev]"
        pip install pytest pytest-cov

    - name: Run tests with coverage (branch-specific)
      run: |
        # Run tests with branch-specific marker filtering
        # For main branch: run all tests (including optional tests)
        # For dev branch: exclude optional tests (docker, llm, performance, pydantic_ai)
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Running all tests including optional tests for main branch"
          pytest tests/ --cov=DeepResearch --cov-report=xml --cov-report=term-missing --junitxml=junit.xml -o junit_family=legacy
        else
          echo "Running tests excluding optional tests for dev branch"
          pytest tests/ -m "not optional and not containerized" --cov=DeepResearch --cov-report=xml --cov-report=term-missing --junitxml=junit.xml -o junit_family=legacy
        fi

    - name: Run bioinformatics unit tests (all branches)
      run: |
        echo "🧬 Running bioinformatics unit tests..."
        pytest tests/test_bioinformatics_tools/ -m "not containerized" --cov=DeepResearch --cov-append --cov-report=xml --cov-report=term-missing --junitxml=junit-bioinformatics.xml -o junit_family=legacy

    - name: Run bioinformatics containerized tests (main branch only)
      if: github.ref == 'refs/heads/docker'
      run: |
        echo "🐳 Running bioinformatics containerized tests..."
        # Check if Docker is available and bioinformatics images exist
        if docker --version >/dev/null 2>&1; then
          make test-bioinformatics-containerized || echo "⚠️  Containerized tests failed, but continuing..."
        else
          echo "⚠️  Docker not available, skipping containerized tests"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: Josephrp/DeepCritical
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: Josephrp/DeepCritical

    - name: Run VLLM tests (optional, manual trigger only)
      if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[vllm-tests]')
      run: |
        # Install VLLM test dependencies with Hydra
        pip install testcontainers omegaconf hydra-core
        # Run VLLM tests with Hydra configuration (single instance optimization)
        python scripts/run_vllm_tests.py --no-hydra
      continue-on-error: true  # VLLM tests are allowed to fail in CI

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff>=0.15.1

    - name: Run linting (Ruff)
      run: |
        ruff --version
        ruff check DeepResearch/ tests/ --extend-ignore=EXE001 --output-format=github

    - name: Check formatting (Ruff)
      run: |
        ruff format --check DeepResearch/ tests/

  types:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python

      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up uv
      uses: astral-sh/setup-uv@v5

    - name: Create venv and install deps
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e ".[dev]"

    - name: Run ty type check
      env:
        VIRTUAL_ENV: .venv
      run: |
        uvx ty --version
        uvx ty check
